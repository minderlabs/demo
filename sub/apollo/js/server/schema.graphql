#
# Copyright 2016 Alien Laboratories, Inc.
#

#
# http://graphql.org/learn/schema/
#

#
# Custom scalars.
# http://graphql.org/learn/schema/#scalar-types
# http://dev.apollodata.com/tools/graphql-tools/scalars.html
# http://dev.apollodata.com/tools/graphql-tools/resolvers.html
# https://github.com/mugli/learning-graphql/blob/master/7.%20Deep%20Dive%20into%20GraphQL%20Type%20System.md
# http://graphql.org/graphql-js/type
#

scalar Date

scalar Void

#
# Input types.
#

input ArrayDelta {
  index: Int
  value: Void!
}

input FieldDelta {
  field: String!
  value: Void!
}

type Geo {
  lat: Float!
  lng: Float!
}

#
# Root node.
#

type Viewer {
  id: ID!
  user: User!
}

#
# Item types.
# http://dev.apollodata.com/tools/graphql-tools/resolvers.html#Unions-and-interfaces
# https://github.com/apollostack/graphql-server/issues/172
#

interface Item {
  id: ID!
  type: String!
  title: String!
  labels: [String]!
}

type User implements Item {
  id: ID!
  type: String!
  title: String!
  labels: [String]!

  username: String!
}

type Task implements Item {
  id: ID!
  type: String!
  title: String!
  labels: [String]!

  status: Int!
}

type City implements Item {
  id: ID!
  type: String!
  title: String!
  labels: [String]!

  geo: Geo
}

#
# Queries.
#

type RootQuery {
  viewer(userId: ID!): Viewer!
  item(itemId: ID!): Item!
  items(text: String, offset: Int, count: Int): [Item]!
}

#
# Mutations.
#

type RootMutation {

  # TODO(burdon): Generalize with FieldDelta.
  updateLabels(itemId: ID!, labels: [ArrayDelta]!): Item!
}

#
# Schema.
#

schema {
  query: RootQuery
  mutation: RootMutation
}
