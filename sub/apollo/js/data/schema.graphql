#
# Copyright 2016 Alien Laboratories, Inc.
#

#
# http://graphql.org/learn/schema
# https://facebook.github.io/graphql
#

#
# Custom scalars.
# http://graphql.org/learn/schema/#scalar-types
# http://dev.apollodata.com/tools/graphql-tools/scalars.html
# http://dev.apollodata.com/tools/graphql-tools/resolvers.html
# https://github.com/mugli/learning-graphql/blob/master/7.%20Deep%20Dive%20into%20GraphQL%20Type%20System.md
# http://graphql.org/graphql-js/type
#

scalar Timestamp
scalar Version

scalar Date

#
# Input types.
#

input Value {
  int:      Int
  float:    Float
  string:   String
  boolean:  Boolean
  id:       ID

  date:     Date

  list:     ListDelta         # TODO(burdon): Rename.
  object:   ObjectDelta

  values:   [Value]
}

#
# List transformation.
#

input ListDelta {
  index: Int
  value: Value!
}

#
# Object transformation.
#

input ObjectDelta {
  field: String!
  value: Value
}

#
# Query/Filter primitives.
#

# TODO(burdon): Add op; nested?
# TODO(burdon): Build AST for query syntax?
# TODO(burdon): Why can't inputs be used for outputs?
# https://github.com/graphql/graphql-js/issues/423

input Predicate {
  field: String!
  value: Value
}

input Filter {
  type: String
  labels: [String]
  text: String
  predicate: Predicate
}

# TODO(burdon): Defs needed for folders? Just serialize to JSON?

type FilterDef {
  type: String
  labels: [String]
  text: String
# predicate: Predicate
}

#
# Misc types.
#

type Geo {
  lat: Float!
  lng: Float!
}

#
# Root node.
#

type Viewer {
  id: ID!
  user: User!
}

#
# Item.
# http://dev.apollodata.com/tools/graphql-tools/resolvers.html#Unions-and-interfaces
# https://github.com/apollostack/graphql-server/issues/172
#

interface Item {
  id: ID!
  type: String!
  alias: String           # User short-name for links.
  title: String!
  labels: [String]
}

#
# Item Types:
#

type User implements Item {
  id: ID!
  type: String!
  alias: String
  title: String!
  labels: [String]

  contact: Contact
  tasks(filter: Filter): [Task]!
}

type Group implements Item {
  id: ID!
  type: String!
  alias: String
  title: String!
  labels: [String]

  members: [User]!
}

type Folder implements Item {
  id: ID!
  type: String!
  alias: String
  title: String!
  labels: [String]

  filter: FilterDef
}

type Contact implements Item {
  id: ID!
  type: String!
  alias: String
  title: String!
  labels: [String]

  email: String!
}

type Task implements Item {
  id: ID!
  type: String!
  alias: String
  title: String!
  labels: [String]

  owner: User
  assignee: User
}

type Event implements Item {
  id: ID!
  type: String!
  alias: String
  title: String!
  labels: [String]

  location: Place
  participants: [Contact]
}

type Place implements Item {
  id: ID!
  type: String!
  alias: String
  title: String!
  labels: [String]

  geo: Geo
}

#
# Queries.
# NOTE: Must only have Input types (since regular types might be recursive and therefore not serializable).
# https://github.com/graphql/graphql-js/issues/312
#

type RootQuery {
  viewer(userId: ID!): Viewer!
  folders(userId: ID!): [Folder]!
  item(itemId: ID!): Item!
  items(filter: Filter, offset: Int, count: Int): [Item]!
}

#
# Mutations.
#

type RootMutation {
  updateItem(itemId: ID!, deltas: [ObjectDelta]!): Item!
}

#
# Schema.
#

schema {
  query: RootQuery
  mutation: RootMutation
}
