input CreateItemMutationInput {
  userId: ID!
  title: String!
  labels: [String]
  clientMutationId: String
}

type CreateItemMutationPayload {
  user: User
  itemEdge: ItemEdge
  clientMutationId: String
}

# A generic data item.
type Item implements Node, ItemInterface, Searchable {
  # The ID of an object
  id: ID!
  version: Int
  type: String
  title: String
  labels: [String]
  snippet(text: String): String
}

# A connection to a list of items.
type ItemConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ItemEdge]
}

# An edge in a connection.
type ItemEdge {
  # The item at the end of the edge
  node: Item

  # A cursor for use in pagination
  cursor: String!
}

# Base type for all data items.
interface ItemInterface {
  type: String
  title: String
  labels: [String]
}

type Mutation {
  createItemMutation(input: CreateItemMutationInput!): CreateItemMutationPayload
  updateItemMutation(input: UpdateItemMutationInput!): UpdateItemMutationPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# A note.
type Note implements Node, ItemInterface, Searchable {
  # The ID of an object
  id: ID!
  type: String
  title: String
  labels: [String]
  snippet(text: String): String
  content: String
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  search(text: String!): [Searchable]
  user(userId: ID): User
  item(userId: ID, itemId: ID): Item
  items(userId: ID): Item
}

# A searchable type.
interface Searchable {
  snippet(text: String): String
}

input StringListMutation {
  index: Int = 0
  value: String!
}

input UpdateItemMutationInput {
  userId: ID!
  itemId: ID!
  title: String
  labels: [StringListMutation]
  clientMutationId: String
}

type UpdateItemMutationPayload {
  item: Item
  clientMutationId: String
}

# A user account.
type User implements Node {
  # The ID of an object
  id: ID!

  # User's name.
  title: String
  searchItems(text: String!): [ItemInterface]

  # User's collection of items.
  items(after: String, first: Int, before: String, last: Int): ItemConnection
}
